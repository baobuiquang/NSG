# ====================================================================================================

import pkg.UTILS.UTILS as UTILS
from pkg.VDOCR.VDOCR import Process_VDOCR
from pkg.LLM.LLM import Process_LLM

def llm_1_extract_jsonapi(gr_extracted_vdocr):
    schema_dondathang = """
{
    "type": "object",
    "description": "ƒê∆°n ƒë·∫∑t h√†ng",
    "properties": {
        "Kh√°ch h√†ng": {
            "type": "object",
            "description": "Kh√°ch h√†ng, c√¥ng ty y√™u c·∫ßu v·∫≠t t∆∞/h√†ng ho√°/s·∫£n ph·∫©m",
            "properties": {
                "T√™n": {"type": "string", "description": "T√™n c√¥ng ty, kh√°ch h√†ng"},
                "ƒê·ªãa ch·ªâ": {"type": "string", "description": "ƒê·ªãa ch·ªâ c√¥ng ty, kh√°ch h√†ng"}
            }
        },
        "Danh s√°ch v·∫≠t t∆∞": {
            "type": "array",
            "description": "Danh s√°ch v·∫≠t t∆∞/h√†ng ho√°/s·∫£n ph·∫©m",
            "items": {
                "type": "object",
                "description": "V·∫≠t t∆∞/h√†ng ho√°/s·∫£n ph·∫©m",
                "properties": {
                    "V·∫≠t t∆∞": {"type": "string", "description": "T√™n v·∫≠t t∆∞/h√†ng ho√°/s·∫£n ph·∫©m + ch·ªßng lo·∫°i + quy c√°ch + ti√™u chu·∫©n + h√¨nh d·∫°ng + k√≠ch th∆∞·ªõc"},
                    "Xu·∫•t x·ª©": {"type": "string"},
                    "Kh·ªëi l∆∞·ª£ng - S·ªë l∆∞·ª£ng": {"type": "object", "properties": {"Gi√° tr·ªã": {"type": "number"}, "ƒê∆°n v·ªã": {"type": "string", "enum": ["kg", "t·∫•n", "c√¢y", "t·∫•m", "b·ªô", "b√≥", "cu·ªôn", "-1"]}}},
                    "Ghi ch√∫ v·∫≠t t∆∞": {"type": "string"}
                }
            }
        },
        "Ghi ch√∫ chung": {"type": "string"}
    }
}
"""
    prompt_1 = f"""
B·∫°n l√† chuy√™n gia tr√≠ch xu·∫•t d·ªØ li·ªáu.
B·∫°n s·∫Ω ƒë∆∞·ª£c cung c·∫•p: (1) Tin nh·∫Øn vƒÉn b·∫£n c·ªßa kh√°ch h√†ng, v√† (2) Schema c·∫•u tr√∫c c·ªßa k·∫øt qu·∫£.
Nhi·ªám v·ª• c·ªßa b·∫°n l√†: (3) Tr√≠ch xu·∫•t d·ªØ li·ªáu JSON t·ª´ tin nh·∫Øn vƒÉn b·∫£n c·ªßa kh√°ch h√†ng.

### (1) Tin nh·∫Øn vƒÉn b·∫£n c·ªßa kh√°ch h√†ng:
\"\"\"
{gr_extracted_vdocr.strip()}
\"\"\"

### (2) Schema c·∫•u tr√∫c c·ªßa k·∫øt qu·∫£:
```
{schema_dondathang.strip()}
```

### (3) Nhi·ªám v·ª•:
T·ª´ tin nh·∫Øn vƒÉn b·∫£n c·ªßa kh√°ch h√†ng, tr√≠ch xu·∫•t d·ªØ li·ªáu d∆∞·ªõi d·∫°ng JSON, tu√¢n th·ªß schema m·ªôt c√°ch ch√≠nh x√°c.
N·∫øu tr∆∞·ªùng th√¥ng tin b·ªã thi·∫øu, kh√¥ng r√µ r√†ng, ho·∫∑c kh√¥ng ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn, th√¨ ƒëi·ªÅn gi√° tr·ªã chu·ªói "-1" n·∫øu l√† string, ƒëi·ªÅn s·ªë -1 n·∫øu l√† number.
ƒê·ªãnh d·∫°ng k·∫øt qu·∫£: Kh√¥ng gi·∫£i th√≠ch, kh√¥ng b√¨nh lu·∫≠n, kh√¥ng vƒÉn b·∫£n th·ª´a. Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ JSON h·ª£p l·ªá. B·∫Øt ƒë·∫ßu b·∫±ng "{{", k·∫øt th√∫c b·∫±ng "}}".
""".strip()
    return UTILS.str2dict_advanced(Process_LLM(prompt_1))

def llm_2_edit_jsonapi(gr_user_message, gr_jsonapi):
    prompt_2 = f"""
B·∫°n s·∫Ω ƒë∆∞·ª£c cung c·∫•p: (1) JSON d·ªØ li·ªáu, v√† (2) Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.
Nhi·ªám v·ª• c·ªßa b·∫°n l√†: (3) Ch·ªânh s·ª≠a JSON d·ªØ li·ªáu theo y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.

### (1) JSON d·ªØ li·ªáu:
```
{UTILS.dict2str(gr_jsonapi)}
```

### (2) Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng:
\"\"\"
{gr_user_message}
\"\"\"

### (3) Nhi·ªám v·ª•:
Ch·ªânh s·ª≠a JSON d·ªØ li·ªáu theo y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c v√† tr·∫£ v·ªÅ JSON d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a.
N·∫øu b·∫°n kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng, ch·ªâ c·∫ßn tr·∫£ v·ªÅ JSON d·ªØ li·ªáu g·ªëc.
ƒê·ªãnh d·∫°ng k·∫øt qu·∫£: Kh√¥ng gi·∫£i th√≠ch, kh√¥ng b√¨nh lu·∫≠n, kh√¥ng vƒÉn b·∫£n th·ª´a. Ch·ªâ tr·∫£ v·ªÅ k·∫øt qu·∫£ JSON h·ª£p l·ªá. B·∫Øt ƒë·∫ßu b·∫±ng "{{", k·∫øt th√∫c b·∫±ng "}}".
"""
    return UTILS.str2dict_advanced(Process_LLM(prompt_2))

# ====================================================================================================

import gradio as gr

theme = gr.themes.Base(
    primary_hue="neutral", secondary_hue="neutral", neutral_hue="neutral",
    font=[gr.themes.GoogleFont('Inter')], font_mono=[gr.themes.GoogleFont('Ubuntu Mono')]
)
head = """
<link rel="icon" href="https://cdn.jsdelivr.net/gh/OneLevelStudio/CORE/static/favicon.png">
"""
css = """
footer { display: none !important; }
"""

# ====================================================================================================

def scan_jsonapi(gr_jsonapi):
    for i1, e1 in enumerate(gr_jsonapi['Danh s√°ch v·∫≠t t∆∞']):
        bot_msg = ""
        field_to_edit = ""
        if str(e1['V·∫≠t t∆∞']).strip() == "-1":
            bot_msg = f"‚úçÔ∏è T√™n c·ªßa v·∫≠t t∆∞ th·ª© {i1+1}:"
            field_to_edit = f"gr_jsonapi['Danh s√°ch v·∫≠t t∆∞'][{i1}]['V·∫≠t t∆∞']"
        elif str(e1['Xu·∫•t x·ª©']).strip() == "-1":
            bot_msg = f"‚úçÔ∏è Xu·∫•t x·ª© c·ªßa v·∫≠t t∆∞ th·ª© {i1+1} ({e1['V·∫≠t t∆∞']}):"
            field_to_edit = f"gr_jsonapi['Danh s√°ch v·∫≠t t∆∞'][{i1}]['Xu·∫•t x·ª©']"
        elif str(e1['Kh·ªëi l∆∞·ª£ng - S·ªë l∆∞·ª£ng']['ƒê∆°n v·ªã']).strip() == "-1":
            bot_msg = f"‚úçÔ∏è ƒê∆°n v·ªã c·ªßa v·∫≠t t∆∞ th·ª© {i1+1} ({e1['V·∫≠t t∆∞']}):"
            field_to_edit = f"gr_jsonapi['Danh s√°ch v·∫≠t t∆∞'][{i1}]['Kh·ªëi l∆∞·ª£ng - S·ªë l∆∞·ª£ng']['ƒê∆°n v·ªã']"
        elif str(e1['Kh·ªëi l∆∞·ª£ng - S·ªë l∆∞·ª£ng']['Gi√° tr·ªã']).strip() == "-1":
            bot_msg = f"‚úçÔ∏è Gi√° tr·ªã c·ªßa v·∫≠t t∆∞ th·ª© {i1+1} ({e1['V·∫≠t t∆∞']}):"
            field_to_edit = f"gr_jsonapi['Danh s√°ch v·∫≠t t∆∞'][{i1}]['Kh·ªëi l∆∞·ª£ng - S·ªë l∆∞·ª£ng']['Gi√° tr·ªã']"
        if bot_msg != "":
            break
    return {
        "bot_msg": bot_msg if bot_msg != "" else "üí¨ B·∫°n c√≥ mu·ªën ch·ªânh s·ª≠a g√¨ th√™m?",
        "field_to_edit": field_to_edit
    }

# ====================================================================================================

def fn_upload(gr_history, gr_uploaded_file):
    gr_history += [{"role": "assistant", "content": f"B·∫°n ƒë√£ t·∫£i l√™n file:"}]
    gr_history += [{"role": "assistant", "content": gr.File(gr_uploaded_file)}]
    gr_extracted_vdocr = Process_VDOCR(gr_uploaded_file)
    gr_jsonapi = llm_1_extract_jsonapi(gr_extracted_vdocr)
    gr_table = [[e['V·∫≠t t∆∞'], e['Xu·∫•t x·ª©'], e['Kh·ªëi l∆∞·ª£ng - S·ªë l∆∞·ª£ng']['Gi√° tr·ªã'], e['Kh·ªëi l∆∞·ª£ng - S·ªë l∆∞·ª£ng']['ƒê∆°n v·ªã'], e['Ghi ch√∫ v·∫≠t t∆∞']] for e in gr_jsonapi['Danh s√°ch v·∫≠t t∆∞']]
    scan_res = scan_jsonapi(gr_jsonapi)
    gr_field_to_edit = scan_res['field_to_edit']
    gr_history += [{"role": "assistant", "content": scan_res['bot_msg']}]
    return gr_history, gr_extracted_vdocr, gr_jsonapi, gr_table, gr_field_to_edit

def fn_chat_1(gr_history, gr_message):
    gr_history += [{"role": "user", "content": gr_message['text']}]
    gr_user_message = gr_message['text']
    gr_message = ""
    return gr_history, gr_message, gr_user_message

def fn_chat_2(gr_history, gr_user_message, gr_jsonapi, gr_field_to_edit):
    # ---------- Case 1: gr_field_to_edit ----------
    if gr_field_to_edit.strip() != "":
        exec(f"{gr_field_to_edit} = '{gr_user_message}'")
        scan_res = scan_jsonapi(gr_jsonapi)
        gr_field_to_edit = scan_res['field_to_edit']
        gr_history += [{"role": "assistant", "content": scan_res['bot_msg']}]
    # ---------- Case 2: gr_field_to_edit is "" ----------
    else:
        gr_jsonapi_new = llm_2_edit_jsonapi(gr_user_message, gr_jsonapi)
        if gr_jsonapi == gr_jsonapi_new:
            gr_history += [{"role": "assistant", "content": "üìÑ Kh√¥ng ch·ªânh s·ª≠a\nüí¨ B·∫°n c√≥ mu·ªën ch·ªânh s·ª≠a g√¨ th√™m?"}]
        else:
            gr_history += [{"role": "assistant", "content": "üìù Ch·ªânh s·ª≠a ho√†n th√†nh\nüí¨ B·∫°n c√≥ mu·ªën ch·ªânh s·ª≠a g√¨ th√™m?"}]
        gr_jsonapi = gr_jsonapi_new
    # ----------------------------------------------------
    gr_table = [[e['V·∫≠t t∆∞'], e['Xu·∫•t x·ª©'], e['Kh·ªëi l∆∞·ª£ng - S·ªë l∆∞·ª£ng']['Gi√° tr·ªã'], e['Kh·ªëi l∆∞·ª£ng - S·ªë l∆∞·ª£ng']['ƒê∆°n v·ªã'], e['Ghi ch√∫ v·∫≠t t∆∞']] for e in gr_jsonapi['Danh s√°ch v·∫≠t t∆∞']]
    return gr_history, gr_jsonapi, gr_table, gr_field_to_edit

with gr.Blocks(title="NSG", theme=theme, head=head, css=css, analytics_enabled=False, fill_height=True, fill_width=True) as demo:
    with gr.Row():
        with gr.Column():
            gr_uploaded_file = gr.File()
            gr_extracted_vdocr = gr.Textbox(max_lines=5, interactive=False, label="gr_extracted_vdocr")
            gr_user_message = gr.Textbox(max_lines=1, interactive=False, label="gr_user_message")
            gr_field_to_edit = gr.Textbox(max_lines=1, interactive=False, label="gr_field_to_edit")
        with gr.Column():
            gr_history = gr.Chatbot(type="messages", placeholder="# NSG", group_consecutive_messages=False, container=False)
            gr_message = gr.MultimodalTextbox(file_count="single", placeholder="Nh·∫≠p tin nh·∫Øn", submit_btn=True, autofocus=True, autoscroll=True, container=False)
        with gr.Column():
            gr_table = gr.DataFrame(headers=["V·∫≠t t∆∞", "Xu·∫•t x·ª©", "Gi√° tr·ªã", "ƒê∆°n v·ªã", "Ghi ch√∫ v·∫≠t t∆∞"], show_row_numbers=True)
            gr_jsonapi = gr.JSON(open=True)

    # Upload file
    gr.on(
        triggers=[gr_uploaded_file.upload],
        fn=fn_upload,
        inputs=[gr_history, gr_uploaded_file],
        outputs=[gr_history, gr_extracted_vdocr, gr_jsonapi, gr_table, gr_field_to_edit],
        show_progress="full"
    )
    # Chat
    gr.on(
        triggers=[gr_message.submit],
        fn=fn_chat_1,
        inputs=[gr_history, gr_message],
        outputs=[gr_history, gr_message, gr_user_message],
        show_progress="hidden"
    ).then(
        fn=fn_chat_2,
        inputs=[gr_history, gr_user_message, gr_jsonapi, gr_field_to_edit],
        outputs=[gr_history, gr_jsonapi, gr_table, gr_field_to_edit],
        show_progress="hidden"
    )

# ====================================================================================================

if __name__ == "__main__":
    demo.launch(server_port=1234)